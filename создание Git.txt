зарегистрировались,создаём репозиторий с readme файлом
далее делаем клон копируем ссылку из репозитория,открываем папку с проектом,правой кнопкой тыкаем в папке проекта и жмем GitBash Here
пишем git clone и вставляем ссылку репозитория типа такого
git clone https://github.com/Pro92/Jetro.git

прописываем cd 'название папки проекта' - появится путь в конце надпись (master)

далее пишем команду со своим ником на гитхабе

git config --global user.name "Your Name" тыкаем энтер,ничего не выведется но он просто зафиксирует нас

так же прописываем команду со своим мылом на которое зареганы в гитхабе

git config --global user.email "weezy192@mail.ru"

потом можно использовать либо терминал в вс код либо как в первом варианте выше

допустим мы создали файлы стандартные проекта css,index и тд 

git add .  - добавляются наши созданные файлы и папки 
то есть получается что git add . как бы вносит изменения к себе в память и они там висят,потом коммитом мы описываем и сохраняем эти 
изменения уже.
точка сохраняет все изменения файлов и папок добавленных,вместо неё можно писать конкретный файл типа
git add index.html

потом проверяем статус файлов 
git status

далее нужно описать нам что мы сохранили или что изменили. это называется коммит. 
git commit -m 'описание что мы сделали' -  (-m это message) в кавычках пишем что мы изменили или добавили.



состояния нужно описывать логично и понятно,типо added main.js или еще что то,чтобы можно было откатиться к какому то состоянию проекта

вобщем если ты добавляешь новые файлы или папку в проект надо сначала написать git add .
потом пишем git commit -am 
если просто изменения в файлах типо css,js,html, то в коммите пишешь типа 'update main.js'

коммитить надо когда ты сделал уже какую то секцию,а не каждые две строчки. сверстал хедер,закоммитил,секцию - закоммитил и тд.
если вдруг что то нужно поменять то что было,например цвет фона или кнопки или еще что то пишешь в коммите типо 'fix color header'

но это все сохраняется локально,на нашем ПК
чтобы отправить в свою ветку на гитхаб все изменения пишем команду
git push origin master  - возможно просто git push, если будут ответвления и допустим у фронтов своя ветка которая имеет свое название.
в ветке мастер создаются только основные папки проекта если есть,а так идет новая ветка для фронта например своя,для бека своя 
и каждый работает со своей ветко. в оригин мастер никто не работает. это уже можно сказать полноценный готовый проект в ней лежит.
соответственно отправлять надо на свою ветку а не на origin master, например в ней есть ветка dev, в ветке dev есть front-end
back end, и я отправляю в ветку dev или в фронтенд.

*так же может запросить вход в аккаунт в самом терминале,когда пишешь пароль его не будет видно,то есть вобще будет пустая строка
это нормально,просто так скрывается,просто пишешь пароль и жмешь ентер.

на сайте появляются все наши файлы и там же можно посмотреть коммиты ,у каждого свой уникальный номер и можно вернуться к ним если нужно
но вроде это редко.

перед тем как запушить свои результаты в ветку,нужно сначала взять оттуда результат работы других людей
если к примеру один делает хедер ,а ты делаешь футер,во избежание конфликтов,если он что то туда еще добавил
нужно сначала выкачать его результат себе,а потом отправлять своё
так же перед тем как выкачать,нужно добавить свой коммит git commit -am , а потом пуллить
команда для того чтобы выкачать
git pull origin master

если появляется конфликт гит покажет что на одной и той же строчке разный код просто удаляем лишние символы а свой код оставляем
и добавляем еще один коммит типа git commit -am 'fix conflict footer/section'

и потом уже пушить своё.

в настройках на гитхабе есть пункт Manage access, там есть коллаборатор,можно дать доступ кому то к нему,чтобы они могли 
вносить так же изменения в наши файлы,без него гит пуш и гит пулл бесполезны